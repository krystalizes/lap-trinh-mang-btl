/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class ClientForm extends javax.swing.JFrame {

    private Socket client;
    private DataOutputStream dos;
    private DataInputStream dis;
    private String fileNameToServer;
    private String fileNameLocal;
    private Vector< Vector<String> > model;
    /**
     * Creates new form ClientForm
     */
    public ClientForm(Socket client) {
        initComponents();
        this.client = client;
        try {
            model = new Vector<>();
            dis = new DataInputStream(client.getInputStream());
            dos = new DataOutputStream(client.getOutputStream());
            String fileListButStr = dis.readUTF();
            updateList(fileListButStr);
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keyWordInput = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        downloadBtn = new javax.swing.JButton();
        uploadBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cancelSearchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        keyWordInput.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N

        searchBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        searchBtn.setText("Tìm kiếm");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        downloadBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        downloadBtn.setText("Tải xuống");
        downloadBtn.setMinimumSize(new java.awt.Dimension(119, 29));
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        uploadBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        uploadBtn.setText("Tải lên");
        uploadBtn.setMinimumSize(new java.awt.Dimension(119, 29));
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel1.setText("Danh sách tập tin:");

        cancelSearchBtn.setVisible(false);
        cancelSearchBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        cancelSearchBtn.setText("Xóa tìm kiếm");
        cancelSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSearchBtnActionPerformed(evt);
            }
        });

        fileList.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        fileList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tên tập tin", "Kích thước"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileList.setRowHeight(20);
        fileList.setShowGrid(false);
        fileList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(fileList);
        if (fileList.getColumnModel().getColumnCount() > 0) {
            fileList.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(keyWordInput)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 607, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(downloadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(uploadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyWordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBtn))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(downloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        UploadFile uploadFile = new UploadFile(client);
        uploadFile.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent windowEvent) {
                try {
                    // dispose
                    dos.writeUTF("UPDATE_FILE_LIST");

                    String fileListButStr = dis.readUTF();
                    updateList(fileListButStr);
                } catch (IOException ex) {
                    Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

//                @Override
//                public void windowClosing(WindowEvent windowEvent){
//                    try {
//                        // click X
//                        dos.writeUTF("DOWNLOAD_FILE_CANCEL");
//                    } catch (IOException ex) {
//                        Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
        });
        uploadFile.setTitle("Tải lên");
        uploadFile.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        uploadFile.setVisible(true);
    }//GEN-LAST:event_uploadBtnActionPerformed

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        fileNameToServer = (String) fileList.getValueAt(fileList.getSelectedRow(), 0);
        String[] temp = fileNameToServer.split("\\\\");
        fileNameLocal = temp[temp.length - 1];
        if (fileNameToServer == null) {
            new MyOptionPane("Chọn tập tin để download", this).showMessageDialog("Chọn tập tin...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println(fileNameToServer);
        String toSend = "DOWNLOAD_FILE_REQUEST;" + fileNameToServer;
        
        
        try {
            dos.writeUTF(toSend);
            DownloadFile transferFile = new DownloadFile(client, fileNameLocal);
            transferFile.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent windowEvent) {
                    try {
                        // dispose
                        dos.writeUTF("DOWNLOAD_FILE_SUCCESSFUL;" + fileNameToServer);
                    } catch (IOException ex) {
                        Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                @Override
                public void windowClosing(WindowEvent windowEvent) {
                    try {
                        // click X
                        dos.writeUTF("DOWNLOAD_FILE_CANCEL;" + fileNameToServer);
                    } catch (IOException ex) {
                        Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            transferFile.setTitle("Tải xuống " + (String) fileList.getValueAt(fileList.getSelectedRow(), 0));
            transferFile.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            transferFile.setVisible(true);

        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_downloadBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        updateList(searchByName(keyWordInput.getText()));
        cancelSearchBtn.setVisible(true);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void cancelSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSearchBtnActionPerformed
        keyWordInput.setText("");
        searchBtn.doClick();
        cancelSearchBtn.setVisible(false);
    }//GEN-LAST:event_cancelSearchBtnActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelSearchBtn;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JTable fileList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyWordInput;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration//GEN-END:variables
    private void updateList(String fileListButStr) {
        if(model.size() > 0 && model!=null){
            model.clear();
        }
        String[] arr = fileListButStr.split(";");
        DefaultTableModel t_model = (DefaultTableModel) fileList.getModel();
        t_model.getDataVector().removeAllElements();
        for(String str : arr){
            if(str.equals("")){
                continue;
            }
            String[] data = processData(str);
            Vector<String> v = new Vector();
            v.add(data[0]);
            v.add(data[1]);
            model.add(v);
            t_model.addRow(data);
        }
        fileList.setModel(t_model);
        t_model.fireTableDataChanged();
    }

    private void updateList(Vector< Vector<String> > arr) {
        DefaultTableModel t_model = (DefaultTableModel) fileList.getModel();
        t_model.getDataVector().removeAllElements();
        arr.forEach(v -> {
            t_model.addRow(v);
        });
        fileList.setModel(t_model);
        t_model.fireTableDataChanged();
    }

    private Vector< Vector<String> > searchByName(String keyWord) {
        Vector< Vector<String> >  res = new Vector<>();
        for(Vector v : model){
            if(((String)v.get(0)).toLowerCase().contains(keyWord.toLowerCase())){
                res.add(v);
            }
        }
        return res;
    }

    private String[] processData(String str) {
        String[] res = str.split(":");
        
        float fileInKB = Float.parseFloat(res[1]) / 1024f;
        
        float fileInMB = fileInKB / 1024f;
        
        float fileInGB = fileInMB / 1024f;
        
        res[1] = String.format("%.2f", fileInKB<1024?fileInKB:fileInMB<1024?fileInMB:fileInGB);
        res[1] = fileInKB<1024?res[1] + " KB": fileInMB<1024? res[1] +" MB" : res[1] +" GB";
        return res;
    }
}
