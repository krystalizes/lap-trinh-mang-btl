/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.awt.Font;
import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import javax.swing.*;

/**
 *
 * @author ASUS
 */
public class ServerForm extends javax.swing.JFrame {
    private boolean isRunning = false;
    private ServerThread serverThread;
    String fileDirectory;
    /**
     * Creates new form ServerForm
     */
    public ServerForm() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        folderInputField = new javax.swing.JTextField();
        selectFolderBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        portInputField = new javax.swing.JTextField();
        startServerBtn = new javax.swing.JButton();
        stopServerBtn = new javax.swing.JButton();
        stopServerBtn.setEnabled(isRunning);
        jScrollPane2 = new javax.swing.JScrollPane();
        serverLogArea = new javax.swing.JTextPane();
        serverLogArea.setEditable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Chọn thư mục:");

        folderInputField.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        folderInputField.setEditable(false);
        folderInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderInputFieldActionPerformed(evt);
            }
        });

        selectFolderBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        selectFolderBtn.setText("Chọn...");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel2.setText("Port:");

        portInputField.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        portInputField.setText("3221");
        portInputField.setMinimumSize(new java.awt.Dimension(40, 20));
        portInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portInputFieldActionPerformed(evt);
            }
        });

        startServerBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        startServerBtn.setText("Khởi động server");
        startServerBtn.setAutoscrolls(true);
        startServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerBtnActionPerformed(evt);
            }
        });

        stopServerBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        stopServerBtn.setText("Kết thúc server");
        stopServerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerBtnActionPerformed(evt);
            }
        });

        serverLogArea.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jScrollPane2.setViewportView(serverLogArea);
        JScrollBar vertical = jScrollPane2.getVerticalScrollBar();
        vertical.setValue( vertical.getMaximum() );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startServerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopServerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(folderInputField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectFolderBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(folderInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFolderBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startServerBtn)
                    .addComponent(stopServerBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void folderInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_folderInputFieldActionPerformed

    private void startServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerBtnActionPerformed
        if(folderInputField.getText().equals("")){
            JLabel label = new JLabel("Xin hãy chọn thư mục để chia sẻ tập tin!");
            label.setFont(new Font("SF Pro Display", Font.PLAIN, 16));
            JOptionPane.showMessageDialog(this, label, "Chọn thư mục...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        isRunning = true;
        updateUI();
        int port = Integer.parseInt(portInputField.getText());
        serverThread = new ServerThread(this, port, fileDirectory);
        new Thread(serverThread).start();
    }//GEN-LAST:event_startServerBtnActionPerformed

    private void portInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portInputFieldActionPerformed

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File("."));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File yourFolder = fc.getSelectedFile();
            fileDirectory = yourFolder.getAbsolutePath();
            folderInputField.setText(fileDirectory);
            systemLog("[Server]: Đã chọn thư mục "+fileDirectory);
        }
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void stopServerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerBtnActionPerformed
        isRunning = false;
        serverThread.stop();
        updateUI();
        
    }//GEN-LAST:event_stopServerBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServerForm serverForm = new ServerForm();
                serverForm.setTitle("FTP Server");
                serverForm.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField folderInputField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField portInputField;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JTextPane serverLogArea;
    private javax.swing.JButton startServerBtn;
    private javax.swing.JButton stopServerBtn;
    // End of variables declaration//GEN-END:variables

    public void systemLog(String str){
        String log = "[" + new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(System.currentTimeMillis()) +"]: "+ str;
        String toLog = serverLogArea.getText() + "\n" + log;
        serverLogArea.setText(toLog);
    }
    private void updateUI(){
        portInputField.setEditable(!isRunning);
        startServerBtn.setEnabled(!isRunning);
        stopServerBtn.setEnabled(isRunning);
        selectFolderBtn.setEnabled(!isRunning);
    }
}
